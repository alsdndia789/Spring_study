스프링 컨테이너 생성
----------------------------------------
수정 삭제
ApplicationContext -> 스프링 컨테이너(BeanFactory를 직접 사용하는 경우가 거의 없기 때문), 인터페이스

다형성이 적용되어있음

요즘은 대부분 Annotation 기반으로 만듬.

 

new AnnotationConfigApplicationContext -> 스프링 컨테이너가 생김

구성정보(AppConfig)를 지정해줘야함.

@Bean 붙은걸 호출을 해서 스프링 컨테이너에 넣음

bean 의 이름은 모두 다르게.

스프링 컨테이너는 설정 정보를 참고하여 의존관계를 주입한다.

컨테이너에 등록된 모든 빈 조회
----------------------------------------------
수정 삭제
## 빈 조회하는 방법 ##

beanDefinitionNames()  -> 빈 하나하나에 대한 정보

beanDefinition.getRole() -> 개발하기 위해서 내가 등록한 application

iter => list 나 배열이 있으면 for문이 자동으로 완성된다.

 

 

스프링 빈 조회 - 기본
-------------------------------------------------
수정 삭제
getbean 을 이용해 bean을 조회함. (이름 / 타입 ), 구체타입(MemberServiceImpl.class)으로도 조회 가능. 

NoSuchBeanDefinitionException.class, ()  -> ac.getBean(이름 타임) 이 예외가 터져야 test 성공

스프링 빈 조회 - 동일한 타입이 둘 이상
01:06
수정 삭제
타입으로 조회시 같은 타입이 두개 이상 있으면 오류가 발생한다

-> 조회시 이름도 함께 말해주면 된다.

getBeansOfType..

 

assertThat(beansOfType.size() ->타입이 같은  빈의 종류 개수

스프링 빈 조회 - 상속 관계
-------------------------------------------------------
수정 삭제
조회할때 자식타입을 전부 함께 조회한다. -> Object로 조회하면 모든 빈을 조회한다.

역할과 구현을 나누기 위해서 rateDiscountPolicy 가 아닌 DiscountPolicy로 만듬.(더 큰 범위)

BeanFactory와 ApplicationContext
---------------------------------------------
수정 삭제
최상위 인터페이스인 beanFactory  ( 스프링 빈 관리, getBean() 제공 , 지금까지 우리가 사용하던 기능들이 전부 beanFactory), ApplicationContext -> beanFactory 에 부가 기능(messageSource, EventPublisher, 등등을 더한것.

 

 messageSource -> 어떤곳에선 한글, 어떤곳에선 영어

 EnvironmentCapable -> 환경변수 ( 로컬 , 개발 , 운영 등을 구분)

ApplicationPublisher -> 이벤트를 발행

ResourceOrder -> 외부에서 리소스를 조회하는 기능

beanFactory 랑 ApplicationContext 를 둘다 스프링 컨테이너라고 하고, ApplicationContext 만 사용한다고 생각하면 된다.

다양한 설정 형식 지원 - 자바 코드, XML
------------------------------------------------------
수정 삭제
1.  AnnotationConfig 기반으로 사용

 

2. XML 사용. (스프링부트를 사용하면서 잘 사용을 안함.)

장점: 컴파일없이 빈 설정 정보를 변경할 수 있다.

스프링 빈 설정 메타 정보 - BeanDefinition
---------------------------------------
수정 삭제
bean 정보에 대한걸 추성화 시켰기 때문에 XML이던 자바 코드를 읽어서 beanDefinition(빈 설정 메타정보)만 만들면 되기 때문에 다양한 형식을 지원할 수 있다. 

@bean 하나마다 메타 정보가 하나씩 나오는데, 이 메타정보를 기반으로 스프링 빈을 만든다. 

BeanDefinition을 직접 생성해서 스프링 컨테이너에 등록할 수 도 있다.

 스프링은 다양한 형태의 설정 정보를 BeanDefinition으로 추상화해서 사용한다.

싱글톤 컨테이너
웹 애플리케이션과 싱글톤
---------------------------------------------------------
수정 삭제
## 싱글톤 ##

객체가 자바에 하나만 있어야하는 패턴

고객이 올때마다 계속해서 객체를 생성하게되면 메모리 낭비각 심해짐.

싱글톤 패턴
-------------------------------------------------------
수정 삭제
private 생성자를 이용하여, 외부에서 만들수 없게 만듬 ( 협업같은거 할때 ?)

static final 을 사용하여 고유하게 만듬.

스프링 컨테이너를 사용하면, 자동으로 singleton 패턴으로 만들어줌. 

싱글톤 컨테이너
---------------------------------------------------
수정 삭제
스프링 빈 -> 싱글톤으로 관리되는 빈

2번 조회하면 이미 관리되던애랑 똑같은 애를 조회해줌. (싱글톤 적용이 되고있음).

스프링에서는 싱글톤 패턴의 단점을 전부 해결해줌( 지저분한 코드, DIP , OCP, private 생성자..등등)

가끔 요청할때마다 새로 꺼낸다거나 http life cycle 에 bean 의 생명주기를 맞추거나 하는 정말 드문 경우에만 (scope)싱글톤이 아닌 빈을 사용한다.

싱글톤 방식의 주의점
---------------------------------------------
수정 삭제
무상태(stateless)로 설계해야한다.

특정 클라이언트에 의존적인 필드가 있으면 안된다.

특정 클라이언트가 값을 변경할 수 있는 필드가 있으면 안된다

읽기만 가능해야 한다.

필드 대신에 자바에서 공유되지 않는, 지역변수, 파라미터, ThreadLocal 등을 사용해야 한다.

@Configuration과 싱글톤
----------------------------------------------------
수정 삭제
Bean이 붙은 메서드마다 이미 스프링 빈이 존재하면 존재하는 빈을 반환하고, 스프링 빈이 없으면 생성해서 스프링 빈으로 등록하고 반환하는 코드가 동적으로 만들어진다

@Configuration 을 적용하지 않고, @Bean 만 적용하면  스프링 빈으로 등록되지만, 싱글톤을 보장하지 않는다.

컴포넌트 스캔
컴포넌트 스캔과 의존관계 자동 주입 시작하기
-------------------------------------------------------
수정 삭제
bean 을 등록할 것이 너무 많아짐 -> 컴포넌트 스캔이라는 자동으로 스프링 빈을 등록해주는 기능이 있다.  @autowired -> 의존관계도 자동으로 해줌.

@Configuration , @ComponentScan 만 입력하면 끝. -> 자동으로  의존관계를 주입해주는 @Autowired 를 생성자에 붙여줌. 

스프링 빈 이름은 앞 글자만 소문자. 기존 클래스명

AutoWired 는 타입 명이 같은 빈을 검색해서 주입하는것.

탐색 위치와 기본 스캔 대상
------------------------------------------------------
수정 삭제
basePackage => " a " -> a 패키지 에서부터 탐색을 시작함.  (속도적인 측면에서 필요함)

지정하지 않으면 @ComponentScan 이 붙은 클래스의 패키지가  시작 위치가 된다.. -> 관례는 최상단 클레스에 메인 설정 정보를 두고(App Config)  그곳에 @ ComponentScan(@SpringBootApplication) 을 붙임.

annotation 에는 상속 관계가 없다, (spring 기능으로 구현됨)

필터
------------------------------------------------------
수정 삭제
FilterType.ANNOTATION -> Annotation 과 관련된 필터를 만듬

includeFilters -> 컴포넌트 스캔 대상을 추가로 지정한다. excludeFilters -> 컴포넌트 스캔에서 제외할 대상을 지정한다

중복 등록과 충돌
-------------------------------------------
수정 삭제
컴포넌트 스캔에 의해 자동으로 스프링 빈이 등록되는데, 그 이름이 같은 경우 스프링은 오류를 발생시킨다.

수동과 자동등록이 동시에 발생할 경우 수동 빈 등록이 우선권을 가진다.
